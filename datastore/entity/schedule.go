// Code generated by entc, DO NOT EDIT.

package entity

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/syllabix/oncall/datastore/entity/schedule"
)

// Schedule is the model entity for the Schedule schema.
type Schedule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SlackChannelID holds the value of the "slack_channel_id" field.
	SlackChannelID string `json:"slack_channel_id,omitempty"`
	// TeamSlackID holds the value of the "team_slack_id" field.
	TeamSlackID string `json:"team_slack_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Interval holds the value of the "interval" field.
	Interval schedule.Interval `json:"interval,omitempty"`
	// IsEnabled holds the value of the "is_enabled" field.
	IsEnabled bool `json:"is_enabled,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// WeekdaysOnly holds the value of the "weekdays_only" field.
	WeekdaysOnly bool `json:"weekdays_only,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduleQuery when eager-loading is set.
	Edges ScheduleEdges `json:"edges"`
}

// ScheduleEdges holds the relations/edges for other nodes in the graph.
type ScheduleEdges struct {
	// Shifts holds the value of the shifts edge.
	Shifts []*Shift `json:"shifts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ShiftsOrErr returns the Shifts value or an error if the edge
// was not loaded in eager-loading.
func (e ScheduleEdges) ShiftsOrErr() ([]*Shift, error) {
	if e.loadedTypes[0] {
		return e.Shifts, nil
	}
	return nil, &NotLoadedError{edge: "shifts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Schedule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case schedule.FieldIsEnabled, schedule.FieldWeekdaysOnly:
			values[i] = new(sql.NullBool)
		case schedule.FieldID:
			values[i] = new(sql.NullInt64)
		case schedule.FieldSlackChannelID, schedule.FieldTeamSlackID, schedule.FieldName, schedule.FieldInterval:
			values[i] = new(sql.NullString)
		case schedule.FieldEndTime, schedule.FieldStartTime, schedule.FieldCreatedAt, schedule.FieldUpdatedAt, schedule.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Schedule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Schedule fields.
func (s *Schedule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schedule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case schedule.FieldSlackChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slack_channel_id", values[i])
			} else if value.Valid {
				s.SlackChannelID = value.String
			}
		case schedule.FieldTeamSlackID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_slack_id", values[i])
			} else if value.Valid {
				s.TeamSlackID = value.String
			}
		case schedule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case schedule.FieldInterval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interval", values[i])
			} else if value.Valid {
				s.Interval = schedule.Interval(value.String)
			}
		case schedule.FieldIsEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enabled", values[i])
			} else if value.Valid {
				s.IsEnabled = value.Bool
			}
		case schedule.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				s.EndTime = value.Time
			}
		case schedule.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				s.StartTime = value.Time
			}
		case schedule.FieldWeekdaysOnly:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field weekdays_only", values[i])
			} else if value.Valid {
				s.WeekdaysOnly = value.Bool
			}
		case schedule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case schedule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case schedule.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// QueryShifts queries the "shifts" edge of the Schedule entity.
func (s *Schedule) QueryShifts() *ShiftQuery {
	return (&ScheduleClient{config: s.config}).QueryShifts(s)
}

// Update returns a builder for updating this Schedule.
// Note that you need to call Schedule.Unwrap() before calling this method if this Schedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Schedule) Update() *ScheduleUpdateOne {
	return (&ScheduleClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Schedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Schedule) Unwrap() *Schedule {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("entity: Schedule is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Schedule) String() string {
	var builder strings.Builder
	builder.WriteString("Schedule(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", slack_channel_id=")
	builder.WriteString(s.SlackChannelID)
	builder.WriteString(", team_slack_id=")
	builder.WriteString(s.TeamSlackID)
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", interval=")
	builder.WriteString(fmt.Sprintf("%v", s.Interval))
	builder.WriteString(", is_enabled=")
	builder.WriteString(fmt.Sprintf("%v", s.IsEnabled))
	builder.WriteString(", end_time=")
	builder.WriteString(s.EndTime.Format(time.ANSIC))
	builder.WriteString(", start_time=")
	builder.WriteString(s.StartTime.Format(time.ANSIC))
	builder.WriteString(", weekdays_only=")
	builder.WriteString(fmt.Sprintf("%v", s.WeekdaysOnly))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Schedules is a parsable slice of Schedule.
type Schedules []*Schedule

func (s Schedules) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
