// Code generated by entc, DO NOT EDIT.

package schedule

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the schedule type in the database.
	Label = "schedule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlackChannelID holds the string denoting the slack_channel_id field in the database.
	FieldSlackChannelID = "slack_channel_id"
	// FieldTeamSlackID holds the string denoting the team_slack_id field in the database.
	FieldTeamSlackID = "team_slack_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldInterval holds the string denoting the interval field in the database.
	FieldInterval = "interval"
	// FieldIsEnabled holds the string denoting the is_enabled field in the database.
	FieldIsEnabled = "is_enabled"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldWeekdaysOnly holds the string denoting the weekdays_only field in the database.
	FieldWeekdaysOnly = "weekdays_only"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeShifts holds the string denoting the shifts edge name in mutations.
	EdgeShifts = "shifts"
	// Table holds the table name of the schedule in the database.
	Table = "schedules"
	// ShiftsTable is the table that holds the shifts relation/edge.
	ShiftsTable = "shifts"
	// ShiftsInverseTable is the table name for the Shift entity.
	// It exists in this package in order to avoid circular dependency with the "shift" package.
	ShiftsInverseTable = "shifts"
	// ShiftsColumn is the table column denoting the shifts relation/edge.
	ShiftsColumn = "schedule_id"
)

// Columns holds all SQL columns for schedule fields.
var Columns = []string{
	FieldID,
	FieldSlackChannelID,
	FieldTeamSlackID,
	FieldName,
	FieldInterval,
	FieldIsEnabled,
	FieldEndTime,
	FieldStartTime,
	FieldWeekdaysOnly,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsEnabled holds the default value on creation for the "is_enabled" field.
	DefaultIsEnabled bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Interval defines the type for the "interval" enum field.
type Interval string

// Interval values.
const (
	IntervalDaily    Interval = "daily"
	IntervalWeekly   Interval = "weekly"
	IntervalBiWeekly Interval = "bi-weekly"
	IntervalMonthly  Interval = "monthly"
)

func (i Interval) String() string {
	return string(i)
}

// IntervalValidator is a validator for the "interval" field enum values. It is called by the builders before save.
func IntervalValidator(i Interval) error {
	switch i {
	case IntervalDaily, IntervalWeekly, IntervalBiWeekly, IntervalMonthly:
		return nil
	default:
		return fmt.Errorf("schedule: invalid enum value for interval field: %q", i)
	}
}
