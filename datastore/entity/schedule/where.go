// Code generated by entc, DO NOT EDIT.

package schedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/syllabix/oncall/datastore/entity/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SlackChannelID applies equality check predicate on the "slack_channel_id" field. It's identical to SlackChannelIDEQ.
func SlackChannelID(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlackChannelID), v))
	})
}

// TeamSlackID applies equality check predicate on the "team_slack_id" field. It's identical to TeamSlackIDEQ.
func TeamSlackID(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeamSlackID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// IsEnabled applies equality check predicate on the "is_enabled" field. It's identical to IsEnabledEQ.
func IsEnabled(v bool) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsEnabled), v))
	})
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// WeekdaysOnly applies equality check predicate on the "weekdays_only" field. It's identical to WeekdaysOnlyEQ.
func WeekdaysOnly(v bool) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeekdaysOnly), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// SlackChannelIDEQ applies the EQ predicate on the "slack_channel_id" field.
func SlackChannelIDEQ(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlackChannelID), v))
	})
}

// SlackChannelIDNEQ applies the NEQ predicate on the "slack_channel_id" field.
func SlackChannelIDNEQ(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSlackChannelID), v))
	})
}

// SlackChannelIDIn applies the In predicate on the "slack_channel_id" field.
func SlackChannelIDIn(vs ...string) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSlackChannelID), v...))
	})
}

// SlackChannelIDNotIn applies the NotIn predicate on the "slack_channel_id" field.
func SlackChannelIDNotIn(vs ...string) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSlackChannelID), v...))
	})
}

// SlackChannelIDGT applies the GT predicate on the "slack_channel_id" field.
func SlackChannelIDGT(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSlackChannelID), v))
	})
}

// SlackChannelIDGTE applies the GTE predicate on the "slack_channel_id" field.
func SlackChannelIDGTE(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSlackChannelID), v))
	})
}

// SlackChannelIDLT applies the LT predicate on the "slack_channel_id" field.
func SlackChannelIDLT(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSlackChannelID), v))
	})
}

// SlackChannelIDLTE applies the LTE predicate on the "slack_channel_id" field.
func SlackChannelIDLTE(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSlackChannelID), v))
	})
}

// SlackChannelIDContains applies the Contains predicate on the "slack_channel_id" field.
func SlackChannelIDContains(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSlackChannelID), v))
	})
}

// SlackChannelIDHasPrefix applies the HasPrefix predicate on the "slack_channel_id" field.
func SlackChannelIDHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSlackChannelID), v))
	})
}

// SlackChannelIDHasSuffix applies the HasSuffix predicate on the "slack_channel_id" field.
func SlackChannelIDHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSlackChannelID), v))
	})
}

// SlackChannelIDEqualFold applies the EqualFold predicate on the "slack_channel_id" field.
func SlackChannelIDEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSlackChannelID), v))
	})
}

// SlackChannelIDContainsFold applies the ContainsFold predicate on the "slack_channel_id" field.
func SlackChannelIDContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSlackChannelID), v))
	})
}

// TeamSlackIDEQ applies the EQ predicate on the "team_slack_id" field.
func TeamSlackIDEQ(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeamSlackID), v))
	})
}

// TeamSlackIDNEQ applies the NEQ predicate on the "team_slack_id" field.
func TeamSlackIDNEQ(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeamSlackID), v))
	})
}

// TeamSlackIDIn applies the In predicate on the "team_slack_id" field.
func TeamSlackIDIn(vs ...string) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTeamSlackID), v...))
	})
}

// TeamSlackIDNotIn applies the NotIn predicate on the "team_slack_id" field.
func TeamSlackIDNotIn(vs ...string) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTeamSlackID), v...))
	})
}

// TeamSlackIDGT applies the GT predicate on the "team_slack_id" field.
func TeamSlackIDGT(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeamSlackID), v))
	})
}

// TeamSlackIDGTE applies the GTE predicate on the "team_slack_id" field.
func TeamSlackIDGTE(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeamSlackID), v))
	})
}

// TeamSlackIDLT applies the LT predicate on the "team_slack_id" field.
func TeamSlackIDLT(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeamSlackID), v))
	})
}

// TeamSlackIDLTE applies the LTE predicate on the "team_slack_id" field.
func TeamSlackIDLTE(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeamSlackID), v))
	})
}

// TeamSlackIDContains applies the Contains predicate on the "team_slack_id" field.
func TeamSlackIDContains(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTeamSlackID), v))
	})
}

// TeamSlackIDHasPrefix applies the HasPrefix predicate on the "team_slack_id" field.
func TeamSlackIDHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTeamSlackID), v))
	})
}

// TeamSlackIDHasSuffix applies the HasSuffix predicate on the "team_slack_id" field.
func TeamSlackIDHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTeamSlackID), v))
	})
}

// TeamSlackIDEqualFold applies the EqualFold predicate on the "team_slack_id" field.
func TeamSlackIDEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTeamSlackID), v))
	})
}

// TeamSlackIDContainsFold applies the ContainsFold predicate on the "team_slack_id" field.
func TeamSlackIDContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTeamSlackID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// IntervalEQ applies the EQ predicate on the "interval" field.
func IntervalEQ(v Interval) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterval), v))
	})
}

// IntervalNEQ applies the NEQ predicate on the "interval" field.
func IntervalNEQ(v Interval) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInterval), v))
	})
}

// IntervalIn applies the In predicate on the "interval" field.
func IntervalIn(vs ...Interval) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInterval), v...))
	})
}

// IntervalNotIn applies the NotIn predicate on the "interval" field.
func IntervalNotIn(vs ...Interval) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInterval), v...))
	})
}

// IsEnabledEQ applies the EQ predicate on the "is_enabled" field.
func IsEnabledEQ(v bool) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsEnabled), v))
	})
}

// IsEnabledNEQ applies the NEQ predicate on the "is_enabled" field.
func IsEnabledNEQ(v bool) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsEnabled), v))
	})
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// WeekdaysOnlyEQ applies the EQ predicate on the "weekdays_only" field.
func WeekdaysOnlyEQ(v bool) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeekdaysOnly), v))
	})
}

// WeekdaysOnlyNEQ applies the NEQ predicate on the "weekdays_only" field.
func WeekdaysOnlyNEQ(v bool) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeekdaysOnly), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// HasShifts applies the HasEdge predicate on the "shifts" edge.
func HasShifts() predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShiftsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ShiftsTable, ShiftsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShiftsWith applies the HasEdge predicate on the "shifts" edge with a given conditions (other predicates).
func HasShiftsWith(preds ...predicate.Shift) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShiftsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ShiftsTable, ShiftsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		p(s.Not())
	})
}
