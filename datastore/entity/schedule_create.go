// Code generated by entc, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/syllabix/oncall/datastore/entity/schedule"
	"github.com/syllabix/oncall/datastore/entity/shift"
)

// ScheduleCreate is the builder for creating a Schedule entity.
type ScheduleCreate struct {
	config
	mutation *ScheduleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSlackChannelID sets the "slack_channel_id" field.
func (sc *ScheduleCreate) SetSlackChannelID(s string) *ScheduleCreate {
	sc.mutation.SetSlackChannelID(s)
	return sc
}

// SetTeamSlackID sets the "team_slack_id" field.
func (sc *ScheduleCreate) SetTeamSlackID(s string) *ScheduleCreate {
	sc.mutation.SetTeamSlackID(s)
	return sc
}

// SetName sets the "name" field.
func (sc *ScheduleCreate) SetName(s string) *ScheduleCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetInterval sets the "interval" field.
func (sc *ScheduleCreate) SetInterval(s schedule.Interval) *ScheduleCreate {
	sc.mutation.SetInterval(s)
	return sc
}

// SetIsEnabled sets the "is_enabled" field.
func (sc *ScheduleCreate) SetIsEnabled(b bool) *ScheduleCreate {
	sc.mutation.SetIsEnabled(b)
	return sc
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (sc *ScheduleCreate) SetNillableIsEnabled(b *bool) *ScheduleCreate {
	if b != nil {
		sc.SetIsEnabled(*b)
	}
	return sc
}

// SetEndTime sets the "end_time" field.
func (sc *ScheduleCreate) SetEndTime(t time.Time) *ScheduleCreate {
	sc.mutation.SetEndTime(t)
	return sc
}

// SetStartTime sets the "start_time" field.
func (sc *ScheduleCreate) SetStartTime(t time.Time) *ScheduleCreate {
	sc.mutation.SetStartTime(t)
	return sc
}

// SetWeekdaysOnly sets the "weekdays_only" field.
func (sc *ScheduleCreate) SetWeekdaysOnly(b bool) *ScheduleCreate {
	sc.mutation.SetWeekdaysOnly(b)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *ScheduleCreate) SetCreatedAt(t time.Time) *ScheduleCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ScheduleCreate) SetNillableCreatedAt(t *time.Time) *ScheduleCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ScheduleCreate) SetUpdatedAt(t time.Time) *ScheduleCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ScheduleCreate) SetNillableUpdatedAt(t *time.Time) *ScheduleCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *ScheduleCreate) SetDeletedAt(t time.Time) *ScheduleCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *ScheduleCreate) SetNillableDeletedAt(t *time.Time) *ScheduleCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// AddShiftIDs adds the "shifts" edge to the Shift entity by IDs.
func (sc *ScheduleCreate) AddShiftIDs(ids ...int) *ScheduleCreate {
	sc.mutation.AddShiftIDs(ids...)
	return sc
}

// AddShifts adds the "shifts" edges to the Shift entity.
func (sc *ScheduleCreate) AddShifts(s ...*Shift) *ScheduleCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddShiftIDs(ids...)
}

// Mutation returns the ScheduleMutation object of the builder.
func (sc *ScheduleCreate) Mutation() *ScheduleMutation {
	return sc.mutation
}

// Save creates the Schedule in the database.
func (sc *ScheduleCreate) Save(ctx context.Context) (*Schedule, error) {
	var (
		err  error
		node *Schedule
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScheduleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("entity: uninitialized hook (forgotten import entity/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScheduleCreate) SaveX(ctx context.Context) *Schedule {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScheduleCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScheduleCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScheduleCreate) defaults() {
	if _, ok := sc.mutation.IsEnabled(); !ok {
		v := schedule.DefaultIsEnabled
		sc.mutation.SetIsEnabled(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := schedule.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := schedule.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScheduleCreate) check() error {
	if _, ok := sc.mutation.SlackChannelID(); !ok {
		return &ValidationError{Name: "slack_channel_id", err: errors.New(`entity: missing required field "Schedule.slack_channel_id"`)}
	}
	if _, ok := sc.mutation.TeamSlackID(); !ok {
		return &ValidationError{Name: "team_slack_id", err: errors.New(`entity: missing required field "Schedule.team_slack_id"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entity: missing required field "Schedule.name"`)}
	}
	if _, ok := sc.mutation.Interval(); !ok {
		return &ValidationError{Name: "interval", err: errors.New(`entity: missing required field "Schedule.interval"`)}
	}
	if v, ok := sc.mutation.Interval(); ok {
		if err := schedule.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`entity: validator failed for field "Schedule.interval": %w`, err)}
		}
	}
	if _, ok := sc.mutation.IsEnabled(); !ok {
		return &ValidationError{Name: "is_enabled", err: errors.New(`entity: missing required field "Schedule.is_enabled"`)}
	}
	if _, ok := sc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`entity: missing required field "Schedule.end_time"`)}
	}
	if _, ok := sc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`entity: missing required field "Schedule.start_time"`)}
	}
	if _, ok := sc.mutation.WeekdaysOnly(); !ok {
		return &ValidationError{Name: "weekdays_only", err: errors.New(`entity: missing required field "Schedule.weekdays_only"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entity: missing required field "Schedule.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entity: missing required field "Schedule.updated_at"`)}
	}
	return nil
}

func (sc *ScheduleCreate) sqlSave(ctx context.Context) (*Schedule, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *ScheduleCreate) createSpec() (*Schedule, *sqlgraph.CreateSpec) {
	var (
		_node = &Schedule{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: schedule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: schedule.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.SlackChannelID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: schedule.FieldSlackChannelID,
		})
		_node.SlackChannelID = value
	}
	if value, ok := sc.mutation.TeamSlackID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: schedule.FieldTeamSlackID,
		})
		_node.TeamSlackID = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: schedule.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.Interval(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: schedule.FieldInterval,
		})
		_node.Interval = value
	}
	if value, ok := sc.mutation.IsEnabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: schedule.FieldIsEnabled,
		})
		_node.IsEnabled = value
	}
	if value, ok := sc.mutation.EndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: schedule.FieldEndTime,
		})
		_node.EndTime = value
	}
	if value, ok := sc.mutation.StartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: schedule.FieldStartTime,
		})
		_node.StartTime = value
	}
	if value, ok := sc.mutation.WeekdaysOnly(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: schedule.FieldWeekdaysOnly,
		})
		_node.WeekdaysOnly = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: schedule.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: schedule.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: schedule.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if nodes := sc.mutation.ShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.ShiftsTable,
			Columns: []string{schedule.ShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shift.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Schedule.Create().
//		SetSlackChannelID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScheduleUpsert) {
//			SetSlackChannelID(v+v).
//		}).
//		Exec(ctx)
//
func (sc *ScheduleCreate) OnConflict(opts ...sql.ConflictOption) *ScheduleUpsertOne {
	sc.conflict = opts
	return &ScheduleUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Schedule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *ScheduleCreate) OnConflictColumns(columns ...string) *ScheduleUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ScheduleUpsertOne{
		create: sc,
	}
}

type (
	// ScheduleUpsertOne is the builder for "upsert"-ing
	//  one Schedule node.
	ScheduleUpsertOne struct {
		create *ScheduleCreate
	}

	// ScheduleUpsert is the "OnConflict" setter.
	ScheduleUpsert struct {
		*sql.UpdateSet
	}
)

// SetSlackChannelID sets the "slack_channel_id" field.
func (u *ScheduleUpsert) SetSlackChannelID(v string) *ScheduleUpsert {
	u.Set(schedule.FieldSlackChannelID, v)
	return u
}

// UpdateSlackChannelID sets the "slack_channel_id" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateSlackChannelID() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldSlackChannelID)
	return u
}

// SetTeamSlackID sets the "team_slack_id" field.
func (u *ScheduleUpsert) SetTeamSlackID(v string) *ScheduleUpsert {
	u.Set(schedule.FieldTeamSlackID, v)
	return u
}

// UpdateTeamSlackID sets the "team_slack_id" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateTeamSlackID() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldTeamSlackID)
	return u
}

// SetName sets the "name" field.
func (u *ScheduleUpsert) SetName(v string) *ScheduleUpsert {
	u.Set(schedule.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateName() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldName)
	return u
}

// SetInterval sets the "interval" field.
func (u *ScheduleUpsert) SetInterval(v schedule.Interval) *ScheduleUpsert {
	u.Set(schedule.FieldInterval, v)
	return u
}

// UpdateInterval sets the "interval" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateInterval() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldInterval)
	return u
}

// SetIsEnabled sets the "is_enabled" field.
func (u *ScheduleUpsert) SetIsEnabled(v bool) *ScheduleUpsert {
	u.Set(schedule.FieldIsEnabled, v)
	return u
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateIsEnabled() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldIsEnabled)
	return u
}

// SetEndTime sets the "end_time" field.
func (u *ScheduleUpsert) SetEndTime(v time.Time) *ScheduleUpsert {
	u.Set(schedule.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateEndTime() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldEndTime)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *ScheduleUpsert) SetStartTime(v time.Time) *ScheduleUpsert {
	u.Set(schedule.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateStartTime() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldStartTime)
	return u
}

// SetWeekdaysOnly sets the "weekdays_only" field.
func (u *ScheduleUpsert) SetWeekdaysOnly(v bool) *ScheduleUpsert {
	u.Set(schedule.FieldWeekdaysOnly, v)
	return u
}

// UpdateWeekdaysOnly sets the "weekdays_only" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateWeekdaysOnly() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldWeekdaysOnly)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ScheduleUpsert) SetCreatedAt(v time.Time) *ScheduleUpsert {
	u.Set(schedule.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateCreatedAt() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScheduleUpsert) SetUpdatedAt(v time.Time) *ScheduleUpsert {
	u.Set(schedule.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateUpdatedAt() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScheduleUpsert) SetDeletedAt(v time.Time) *ScheduleUpsert {
	u.Set(schedule.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateDeletedAt() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScheduleUpsert) ClearDeletedAt() *ScheduleUpsert {
	u.SetNull(schedule.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Schedule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ScheduleUpsertOne) UpdateNewValues() *ScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(schedule.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Schedule.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ScheduleUpsertOne) Ignore() *ScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScheduleUpsertOne) DoNothing() *ScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScheduleCreate.OnConflict
// documentation for more info.
func (u *ScheduleUpsertOne) Update(set func(*ScheduleUpsert)) *ScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScheduleUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlackChannelID sets the "slack_channel_id" field.
func (u *ScheduleUpsertOne) SetSlackChannelID(v string) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetSlackChannelID(v)
	})
}

// UpdateSlackChannelID sets the "slack_channel_id" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateSlackChannelID() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateSlackChannelID()
	})
}

// SetTeamSlackID sets the "team_slack_id" field.
func (u *ScheduleUpsertOne) SetTeamSlackID(v string) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetTeamSlackID(v)
	})
}

// UpdateTeamSlackID sets the "team_slack_id" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateTeamSlackID() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateTeamSlackID()
	})
}

// SetName sets the "name" field.
func (u *ScheduleUpsertOne) SetName(v string) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateName() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateName()
	})
}

// SetInterval sets the "interval" field.
func (u *ScheduleUpsertOne) SetInterval(v schedule.Interval) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetInterval(v)
	})
}

// UpdateInterval sets the "interval" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateInterval() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateInterval()
	})
}

// SetIsEnabled sets the "is_enabled" field.
func (u *ScheduleUpsertOne) SetIsEnabled(v bool) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetIsEnabled(v)
	})
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateIsEnabled() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateIsEnabled()
	})
}

// SetEndTime sets the "end_time" field.
func (u *ScheduleUpsertOne) SetEndTime(v time.Time) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateEndTime() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateEndTime()
	})
}

// SetStartTime sets the "start_time" field.
func (u *ScheduleUpsertOne) SetStartTime(v time.Time) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateStartTime() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateStartTime()
	})
}

// SetWeekdaysOnly sets the "weekdays_only" field.
func (u *ScheduleUpsertOne) SetWeekdaysOnly(v bool) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetWeekdaysOnly(v)
	})
}

// UpdateWeekdaysOnly sets the "weekdays_only" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateWeekdaysOnly() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateWeekdaysOnly()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ScheduleUpsertOne) SetCreatedAt(v time.Time) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateCreatedAt() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScheduleUpsertOne) SetUpdatedAt(v time.Time) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateUpdatedAt() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScheduleUpsertOne) SetDeletedAt(v time.Time) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateDeletedAt() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScheduleUpsertOne) ClearDeletedAt() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *ScheduleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entity: missing options for ScheduleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScheduleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScheduleUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScheduleUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScheduleCreateBulk is the builder for creating many Schedule entities in bulk.
type ScheduleCreateBulk struct {
	config
	builders []*ScheduleCreate
	conflict []sql.ConflictOption
}

// Save creates the Schedule entities in the database.
func (scb *ScheduleCreateBulk) Save(ctx context.Context) ([]*Schedule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Schedule, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScheduleCreateBulk) SaveX(ctx context.Context) []*Schedule {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Schedule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScheduleUpsert) {
//			SetSlackChannelID(v+v).
//		}).
//		Exec(ctx)
//
func (scb *ScheduleCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScheduleUpsertBulk {
	scb.conflict = opts
	return &ScheduleUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Schedule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *ScheduleCreateBulk) OnConflictColumns(columns ...string) *ScheduleUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ScheduleUpsertBulk{
		create: scb,
	}
}

// ScheduleUpsertBulk is the builder for "upsert"-ing
// a bulk of Schedule nodes.
type ScheduleUpsertBulk struct {
	create *ScheduleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Schedule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ScheduleUpsertBulk) UpdateNewValues() *ScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(schedule.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Schedule.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ScheduleUpsertBulk) Ignore() *ScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScheduleUpsertBulk) DoNothing() *ScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScheduleCreateBulk.OnConflict
// documentation for more info.
func (u *ScheduleUpsertBulk) Update(set func(*ScheduleUpsert)) *ScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScheduleUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlackChannelID sets the "slack_channel_id" field.
func (u *ScheduleUpsertBulk) SetSlackChannelID(v string) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetSlackChannelID(v)
	})
}

// UpdateSlackChannelID sets the "slack_channel_id" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateSlackChannelID() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateSlackChannelID()
	})
}

// SetTeamSlackID sets the "team_slack_id" field.
func (u *ScheduleUpsertBulk) SetTeamSlackID(v string) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetTeamSlackID(v)
	})
}

// UpdateTeamSlackID sets the "team_slack_id" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateTeamSlackID() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateTeamSlackID()
	})
}

// SetName sets the "name" field.
func (u *ScheduleUpsertBulk) SetName(v string) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateName() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateName()
	})
}

// SetInterval sets the "interval" field.
func (u *ScheduleUpsertBulk) SetInterval(v schedule.Interval) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetInterval(v)
	})
}

// UpdateInterval sets the "interval" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateInterval() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateInterval()
	})
}

// SetIsEnabled sets the "is_enabled" field.
func (u *ScheduleUpsertBulk) SetIsEnabled(v bool) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetIsEnabled(v)
	})
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateIsEnabled() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateIsEnabled()
	})
}

// SetEndTime sets the "end_time" field.
func (u *ScheduleUpsertBulk) SetEndTime(v time.Time) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateEndTime() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateEndTime()
	})
}

// SetStartTime sets the "start_time" field.
func (u *ScheduleUpsertBulk) SetStartTime(v time.Time) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateStartTime() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateStartTime()
	})
}

// SetWeekdaysOnly sets the "weekdays_only" field.
func (u *ScheduleUpsertBulk) SetWeekdaysOnly(v bool) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetWeekdaysOnly(v)
	})
}

// UpdateWeekdaysOnly sets the "weekdays_only" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateWeekdaysOnly() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateWeekdaysOnly()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ScheduleUpsertBulk) SetCreatedAt(v time.Time) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateCreatedAt() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScheduleUpsertBulk) SetUpdatedAt(v time.Time) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateUpdatedAt() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScheduleUpsertBulk) SetDeletedAt(v time.Time) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateDeletedAt() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScheduleUpsertBulk) ClearDeletedAt() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *ScheduleUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entity: OnConflict was set for builder %d. Set it on the ScheduleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entity: missing options for ScheduleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScheduleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
