// Code generated by entc, DO NOT EDIT.

package entity

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/syllabix/oncall/datastore/entity/schedule"
	"github.com/syllabix/oncall/datastore/entity/shift"
	"github.com/syllabix/oncall/datastore/entity/user"
)

// Shift is the model entity for the Shift schema.
type Shift struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SequenceID holds the value of the "sequence_id" field.
	SequenceID int `json:"sequence_id,omitempty"`
	// Status holds the value of the "status" field.
	Status shift.Status `json:"status,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// ScheduleID holds the value of the "schedule_id" field.
	ScheduleID int `json:"schedule_id,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShiftQuery when eager-loading is set.
	Edges ShiftEdges `json:"edges"`
}

// ShiftEdges holds the relations/edges for other nodes in the graph.
type ShiftEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Schedule holds the value of the schedule edge.
	Schedule *Schedule `json:"schedule,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShiftEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ScheduleOrErr returns the Schedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShiftEdges) ScheduleOrErr() (*Schedule, error) {
	if e.loadedTypes[1] {
		if e.Schedule == nil {
			// The edge schedule was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: schedule.Label}
		}
		return e.Schedule, nil
	}
	return nil, &NotLoadedError{edge: "schedule"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shift) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shift.FieldID, shift.FieldSequenceID, shift.FieldUserID, shift.FieldScheduleID:
			values[i] = new(sql.NullInt64)
		case shift.FieldStatus:
			values[i] = new(sql.NullString)
		case shift.FieldStartedAt, shift.FieldCreatedAt, shift.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Shift", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shift fields.
func (s *Shift) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shift.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case shift.FieldSequenceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence_id", values[i])
			} else if value.Valid {
				s.SequenceID = int(value.Int64)
			}
		case shift.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = shift.Status(value.String)
			}
		case shift.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				s.UserID = int(value.Int64)
			}
		case shift.FieldScheduleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_id", values[i])
			} else if value.Valid {
				s.ScheduleID = int(value.Int64)
			}
		case shift.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				s.StartedAt = value.Time
			}
		case shift.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case shift.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Shift entity.
func (s *Shift) QueryUser() *UserQuery {
	return (&ShiftClient{config: s.config}).QueryUser(s)
}

// QuerySchedule queries the "schedule" edge of the Shift entity.
func (s *Shift) QuerySchedule() *ScheduleQuery {
	return (&ShiftClient{config: s.config}).QuerySchedule(s)
}

// Update returns a builder for updating this Shift.
// Note that you need to call Shift.Unwrap() before calling this method if this Shift
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shift) Update() *ShiftUpdateOne {
	return (&ShiftClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Shift entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shift) Unwrap() *Shift {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("entity: Shift is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shift) String() string {
	var builder strings.Builder
	builder.WriteString("Shift(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", sequence_id=")
	builder.WriteString(fmt.Sprintf("%v", s.SequenceID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserID))
	builder.WriteString(", schedule_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ScheduleID))
	builder.WriteString(", started_at=")
	builder.WriteString(s.StartedAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Shifts is a parsable slice of Shift.
type Shifts []*Shift

func (s Shifts) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
