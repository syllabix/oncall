// Code generated by entc, DO NOT EDIT.

package shift

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the shift type in the database.
	Label = "shift"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSequenceID holds the string denoting the sequence_id field in the database.
	FieldSequenceID = "sequence_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldScheduleID holds the string denoting the schedule_id field in the database.
	FieldScheduleID = "schedule_id"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeSchedule holds the string denoting the schedule edge name in mutations.
	EdgeSchedule = "schedule"
	// Table holds the table name of the shift in the database.
	Table = "shifts"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "shifts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ScheduleTable is the table that holds the schedule relation/edge.
	ScheduleTable = "shifts"
	// ScheduleInverseTable is the table name for the Schedule entity.
	// It exists in this package in order to avoid circular dependency with the "schedule" package.
	ScheduleInverseTable = "schedules"
	// ScheduleColumn is the table column denoting the schedule relation/edge.
	ScheduleColumn = "schedule_id"
)

// Columns holds all SQL columns for shift fields.
var Columns = []string{
	FieldID,
	FieldSequenceID,
	FieldStatus,
	FieldUserID,
	FieldScheduleID,
	FieldStartedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStartedAt holds the default value on creation for the "started_at" field.
	DefaultStartedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusActive   Status = "active"
	StatusOverride Status = "override"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusOverride:
		return nil
	default:
		return fmt.Errorf("shift: invalid enum value for status field: %q", s)
	}
}
