// Code generated by entc, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/syllabix/oncall/datastore/entity/schedule"
	"github.com/syllabix/oncall/datastore/entity/shift"
	"github.com/syllabix/oncall/datastore/entity/user"
)

// ShiftCreate is the builder for creating a Shift entity.
type ShiftCreate struct {
	config
	mutation *ShiftMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSequenceID sets the "sequence_id" field.
func (sc *ShiftCreate) SetSequenceID(i int) *ShiftCreate {
	sc.mutation.SetSequenceID(i)
	return sc
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (sc *ShiftCreate) SetNillableSequenceID(i *int) *ShiftCreate {
	if i != nil {
		sc.SetSequenceID(*i)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *ShiftCreate) SetStatus(s shift.Status) *ShiftCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *ShiftCreate) SetNillableStatus(s *shift.Status) *ShiftCreate {
	if s != nil {
		sc.SetStatus(*s)
	}
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *ShiftCreate) SetUserID(i int) *ShiftCreate {
	sc.mutation.SetUserID(i)
	return sc
}

// SetScheduleID sets the "schedule_id" field.
func (sc *ShiftCreate) SetScheduleID(i int) *ShiftCreate {
	sc.mutation.SetScheduleID(i)
	return sc
}

// SetStartedAt sets the "started_at" field.
func (sc *ShiftCreate) SetStartedAt(t time.Time) *ShiftCreate {
	sc.mutation.SetStartedAt(t)
	return sc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (sc *ShiftCreate) SetNillableStartedAt(t *time.Time) *ShiftCreate {
	if t != nil {
		sc.SetStartedAt(*t)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *ShiftCreate) SetCreatedAt(t time.Time) *ShiftCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ShiftCreate) SetNillableCreatedAt(t *time.Time) *ShiftCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ShiftCreate) SetUpdatedAt(t time.Time) *ShiftCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ShiftCreate) SetNillableUpdatedAt(t *time.Time) *ShiftCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *ShiftCreate) SetUser(u *User) *ShiftCreate {
	return sc.SetUserID(u.ID)
}

// SetSchedule sets the "schedule" edge to the Schedule entity.
func (sc *ShiftCreate) SetSchedule(s *Schedule) *ShiftCreate {
	return sc.SetScheduleID(s.ID)
}

// Mutation returns the ShiftMutation object of the builder.
func (sc *ShiftCreate) Mutation() *ShiftMutation {
	return sc.mutation
}

// Save creates the Shift in the database.
func (sc *ShiftCreate) Save(ctx context.Context) (*Shift, error) {
	var (
		err  error
		node *Shift
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShiftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("entity: uninitialized hook (forgotten import entity/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShiftCreate) SaveX(ctx context.Context) *Shift {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShiftCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShiftCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShiftCreate) defaults() {
	if _, ok := sc.mutation.StartedAt(); !ok {
		v := shift.DefaultStartedAt()
		sc.mutation.SetStartedAt(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := shift.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := shift.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShiftCreate) check() error {
	if v, ok := sc.mutation.Status(); ok {
		if err := shift.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entity: validator failed for field "Shift.status": %w`, err)}
		}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`entity: missing required field "Shift.user_id"`)}
	}
	if _, ok := sc.mutation.ScheduleID(); !ok {
		return &ValidationError{Name: "schedule_id", err: errors.New(`entity: missing required field "Shift.schedule_id"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entity: missing required field "Shift.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entity: missing required field "Shift.updated_at"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`entity: missing required edge "Shift.user"`)}
	}
	if _, ok := sc.mutation.ScheduleID(); !ok {
		return &ValidationError{Name: "schedule", err: errors.New(`entity: missing required edge "Shift.schedule"`)}
	}
	return nil
}

func (sc *ShiftCreate) sqlSave(ctx context.Context) (*Shift, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *ShiftCreate) createSpec() (*Shift, *sqlgraph.CreateSpec) {
	var (
		_node = &Shift{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shift.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shift.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.SequenceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shift.FieldSequenceID,
		})
		_node.SequenceID = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: shift.FieldStatus,
		})
		_node.Status = &value
	}
	if value, ok := sc.mutation.StartedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shift.FieldStartedAt,
		})
		_node.StartedAt = &value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shift.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shift.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shift.UserTable,
			Columns: []string{shift.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shift.ScheduleTable,
			Columns: []string{shift.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScheduleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Shift.Create().
//		SetSequenceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShiftUpsert) {
//			SetSequenceID(v+v).
//		}).
//		Exec(ctx)
//
func (sc *ShiftCreate) OnConflict(opts ...sql.ConflictOption) *ShiftUpsertOne {
	sc.conflict = opts
	return &ShiftUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Shift.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *ShiftCreate) OnConflictColumns(columns ...string) *ShiftUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ShiftUpsertOne{
		create: sc,
	}
}

type (
	// ShiftUpsertOne is the builder for "upsert"-ing
	//  one Shift node.
	ShiftUpsertOne struct {
		create *ShiftCreate
	}

	// ShiftUpsert is the "OnConflict" setter.
	ShiftUpsert struct {
		*sql.UpdateSet
	}
)

// SetSequenceID sets the "sequence_id" field.
func (u *ShiftUpsert) SetSequenceID(v int) *ShiftUpsert {
	u.Set(shift.FieldSequenceID, v)
	return u
}

// UpdateSequenceID sets the "sequence_id" field to the value that was provided on create.
func (u *ShiftUpsert) UpdateSequenceID() *ShiftUpsert {
	u.SetExcluded(shift.FieldSequenceID)
	return u
}

// AddSequenceID adds v to the "sequence_id" field.
func (u *ShiftUpsert) AddSequenceID(v int) *ShiftUpsert {
	u.Add(shift.FieldSequenceID, v)
	return u
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (u *ShiftUpsert) ClearSequenceID() *ShiftUpsert {
	u.SetNull(shift.FieldSequenceID)
	return u
}

// SetStatus sets the "status" field.
func (u *ShiftUpsert) SetStatus(v shift.Status) *ShiftUpsert {
	u.Set(shift.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ShiftUpsert) UpdateStatus() *ShiftUpsert {
	u.SetExcluded(shift.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *ShiftUpsert) ClearStatus() *ShiftUpsert {
	u.SetNull(shift.FieldStatus)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ShiftUpsert) SetUserID(v int) *ShiftUpsert {
	u.Set(shift.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ShiftUpsert) UpdateUserID() *ShiftUpsert {
	u.SetExcluded(shift.FieldUserID)
	return u
}

// SetScheduleID sets the "schedule_id" field.
func (u *ShiftUpsert) SetScheduleID(v int) *ShiftUpsert {
	u.Set(shift.FieldScheduleID, v)
	return u
}

// UpdateScheduleID sets the "schedule_id" field to the value that was provided on create.
func (u *ShiftUpsert) UpdateScheduleID() *ShiftUpsert {
	u.SetExcluded(shift.FieldScheduleID)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *ShiftUpsert) SetStartedAt(v time.Time) *ShiftUpsert {
	u.Set(shift.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ShiftUpsert) UpdateStartedAt() *ShiftUpsert {
	u.SetExcluded(shift.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ShiftUpsert) ClearStartedAt() *ShiftUpsert {
	u.SetNull(shift.FieldStartedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ShiftUpsert) SetCreatedAt(v time.Time) *ShiftUpsert {
	u.Set(shift.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ShiftUpsert) UpdateCreatedAt() *ShiftUpsert {
	u.SetExcluded(shift.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ShiftUpsert) SetUpdatedAt(v time.Time) *ShiftUpsert {
	u.Set(shift.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ShiftUpsert) UpdateUpdatedAt() *ShiftUpsert {
	u.SetExcluded(shift.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Shift.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ShiftUpsertOne) UpdateNewValues() *ShiftUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(shift.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Shift.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ShiftUpsertOne) Ignore() *ShiftUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShiftUpsertOne) DoNothing() *ShiftUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShiftCreate.OnConflict
// documentation for more info.
func (u *ShiftUpsertOne) Update(set func(*ShiftUpsert)) *ShiftUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShiftUpsert{UpdateSet: update})
	}))
	return u
}

// SetSequenceID sets the "sequence_id" field.
func (u *ShiftUpsertOne) SetSequenceID(v int) *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.SetSequenceID(v)
	})
}

// AddSequenceID adds v to the "sequence_id" field.
func (u *ShiftUpsertOne) AddSequenceID(v int) *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.AddSequenceID(v)
	})
}

// UpdateSequenceID sets the "sequence_id" field to the value that was provided on create.
func (u *ShiftUpsertOne) UpdateSequenceID() *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateSequenceID()
	})
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (u *ShiftUpsertOne) ClearSequenceID() *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.ClearSequenceID()
	})
}

// SetStatus sets the "status" field.
func (u *ShiftUpsertOne) SetStatus(v shift.Status) *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ShiftUpsertOne) UpdateStatus() *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ShiftUpsertOne) ClearStatus() *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.ClearStatus()
	})
}

// SetUserID sets the "user_id" field.
func (u *ShiftUpsertOne) SetUserID(v int) *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ShiftUpsertOne) UpdateUserID() *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateUserID()
	})
}

// SetScheduleID sets the "schedule_id" field.
func (u *ShiftUpsertOne) SetScheduleID(v int) *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.SetScheduleID(v)
	})
}

// UpdateScheduleID sets the "schedule_id" field to the value that was provided on create.
func (u *ShiftUpsertOne) UpdateScheduleID() *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateScheduleID()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ShiftUpsertOne) SetStartedAt(v time.Time) *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ShiftUpsertOne) UpdateStartedAt() *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ShiftUpsertOne) ClearStartedAt() *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.ClearStartedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ShiftUpsertOne) SetCreatedAt(v time.Time) *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ShiftUpsertOne) UpdateCreatedAt() *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ShiftUpsertOne) SetUpdatedAt(v time.Time) *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ShiftUpsertOne) UpdateUpdatedAt() *ShiftUpsertOne {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ShiftUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entity: missing options for ShiftCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShiftUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShiftUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShiftUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShiftCreateBulk is the builder for creating many Shift entities in bulk.
type ShiftCreateBulk struct {
	config
	builders []*ShiftCreate
	conflict []sql.ConflictOption
}

// Save creates the Shift entities in the database.
func (scb *ShiftCreateBulk) Save(ctx context.Context) ([]*Shift, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Shift, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShiftMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShiftCreateBulk) SaveX(ctx context.Context) []*Shift {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShiftCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShiftCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Shift.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShiftUpsert) {
//			SetSequenceID(v+v).
//		}).
//		Exec(ctx)
//
func (scb *ShiftCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShiftUpsertBulk {
	scb.conflict = opts
	return &ShiftUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Shift.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *ShiftCreateBulk) OnConflictColumns(columns ...string) *ShiftUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ShiftUpsertBulk{
		create: scb,
	}
}

// ShiftUpsertBulk is the builder for "upsert"-ing
// a bulk of Shift nodes.
type ShiftUpsertBulk struct {
	create *ShiftCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Shift.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ShiftUpsertBulk) UpdateNewValues() *ShiftUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(shift.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Shift.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ShiftUpsertBulk) Ignore() *ShiftUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShiftUpsertBulk) DoNothing() *ShiftUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShiftCreateBulk.OnConflict
// documentation for more info.
func (u *ShiftUpsertBulk) Update(set func(*ShiftUpsert)) *ShiftUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShiftUpsert{UpdateSet: update})
	}))
	return u
}

// SetSequenceID sets the "sequence_id" field.
func (u *ShiftUpsertBulk) SetSequenceID(v int) *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.SetSequenceID(v)
	})
}

// AddSequenceID adds v to the "sequence_id" field.
func (u *ShiftUpsertBulk) AddSequenceID(v int) *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.AddSequenceID(v)
	})
}

// UpdateSequenceID sets the "sequence_id" field to the value that was provided on create.
func (u *ShiftUpsertBulk) UpdateSequenceID() *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateSequenceID()
	})
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (u *ShiftUpsertBulk) ClearSequenceID() *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.ClearSequenceID()
	})
}

// SetStatus sets the "status" field.
func (u *ShiftUpsertBulk) SetStatus(v shift.Status) *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ShiftUpsertBulk) UpdateStatus() *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ShiftUpsertBulk) ClearStatus() *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.ClearStatus()
	})
}

// SetUserID sets the "user_id" field.
func (u *ShiftUpsertBulk) SetUserID(v int) *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ShiftUpsertBulk) UpdateUserID() *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateUserID()
	})
}

// SetScheduleID sets the "schedule_id" field.
func (u *ShiftUpsertBulk) SetScheduleID(v int) *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.SetScheduleID(v)
	})
}

// UpdateScheduleID sets the "schedule_id" field to the value that was provided on create.
func (u *ShiftUpsertBulk) UpdateScheduleID() *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateScheduleID()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ShiftUpsertBulk) SetStartedAt(v time.Time) *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ShiftUpsertBulk) UpdateStartedAt() *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ShiftUpsertBulk) ClearStartedAt() *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.ClearStartedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ShiftUpsertBulk) SetCreatedAt(v time.Time) *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ShiftUpsertBulk) UpdateCreatedAt() *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ShiftUpsertBulk) SetUpdatedAt(v time.Time) *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ShiftUpsertBulk) UpdateUpdatedAt() *ShiftUpsertBulk {
	return u.Update(func(s *ShiftUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ShiftUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entity: OnConflict was set for builder %d. Set it on the ShiftCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entity: missing options for ShiftCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShiftUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
