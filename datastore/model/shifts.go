// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Shift is an object representing the database table.
type Shift struct {
	SequenceID int         `db:"sequence_id" boil:"sequence_id" json:"sequence_id" toml:"sequence_id" yaml:"sequence_id"`
	UserID     int         `db:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ScheduleID int         `db:"schedule_id" boil:"schedule_id" json:"schedule_id" toml:"schedule_id" yaml:"schedule_id"`
	Status     null.String `db:"status" boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	StartedAt  null.Time   `db:"started_at" boil:"started_at" json:"started_at,omitempty" toml:"started_at" yaml:"started_at,omitempty"`
	CreatedAt  time.Time   `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time   `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *shiftR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L shiftL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShiftColumns = struct {
	SequenceID string
	UserID     string
	ScheduleID string
	Status     string
	StartedAt  string
	CreatedAt  string
	UpdatedAt  string
}{
	SequenceID: "sequence_id",
	UserID:     "user_id",
	ScheduleID: "schedule_id",
	Status:     "status",
	StartedAt:  "started_at",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ShiftWhere = struct {
	SequenceID whereHelperint
	UserID     whereHelperint
	ScheduleID whereHelperint
	Status     whereHelpernull_String
	StartedAt  whereHelpernull_Time
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	SequenceID: whereHelperint{field: "\"shifts\".\"sequence_id\""},
	UserID:     whereHelperint{field: "\"shifts\".\"user_id\""},
	ScheduleID: whereHelperint{field: "\"shifts\".\"schedule_id\""},
	Status:     whereHelpernull_String{field: "\"shifts\".\"status\""},
	StartedAt:  whereHelpernull_Time{field: "\"shifts\".\"started_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"shifts\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"shifts\".\"updated_at\""},
}

// ShiftRels is where relationship names are stored.
var ShiftRels = struct {
	Schedule string
	User     string
}{
	Schedule: "Schedule",
	User:     "User",
}

// shiftR is where relationships are stored.
type shiftR struct {
	Schedule *Schedule `db:"Schedule" boil:"Schedule" json:"Schedule" toml:"Schedule" yaml:"Schedule"`
	User     *User     `db:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*shiftR) NewStruct() *shiftR {
	return &shiftR{}
}

// shiftL is where Load methods for each relationship are stored.
type shiftL struct{}

var (
	shiftAllColumns            = []string{"sequence_id", "user_id", "schedule_id", "status", "started_at", "created_at", "updated_at"}
	shiftColumnsWithoutDefault = []string{"user_id", "schedule_id", "status", "started_at"}
	shiftColumnsWithDefault    = []string{"sequence_id", "created_at", "updated_at"}
	shiftPrimaryKeyColumns     = []string{"user_id", "schedule_id"}
)

type (
	// ShiftSlice is an alias for a slice of pointers to Shift.
	// This should generally be used opposed to []Shift.
	ShiftSlice []*Shift

	shiftQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shiftType                 = reflect.TypeOf(&Shift{})
	shiftMapping              = queries.MakeStructMapping(shiftType)
	shiftPrimaryKeyMapping, _ = queries.BindMapping(shiftType, shiftMapping, shiftPrimaryKeyColumns)
	shiftInsertCacheMut       sync.RWMutex
	shiftInsertCache          = make(map[string]insertCache)
	shiftUpdateCacheMut       sync.RWMutex
	shiftUpdateCache          = make(map[string]updateCache)
	shiftUpsertCacheMut       sync.RWMutex
	shiftUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single shift record from the query.
func (q shiftQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Shift, error) {
	o := &Shift{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for shifts")
	}

	return o, nil
}

// All returns all Shift records from the query.
func (q shiftQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShiftSlice, error) {
	var o []*Shift

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Shift slice")
	}

	return o, nil
}

// Count returns the count of all Shift records in the query.
func (q shiftQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count shifts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shiftQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if shifts exists")
	}

	return count > 0, nil
}

// Schedule pointed to by the foreign key.
func (o *Shift) Schedule(mods ...qm.QueryMod) scheduleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ScheduleID),
	}

	queryMods = append(queryMods, mods...)

	query := Schedules(queryMods...)
	queries.SetFrom(query.Query, "\"schedules\"")

	return query
}

// User pointed to by the foreign key.
func (o *Shift) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadSchedule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftL) LoadSchedule(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShift interface{}, mods queries.Applicator) error {
	var slice []*Shift
	var object *Shift

	if singular {
		object = maybeShift.(*Shift)
	} else {
		slice = *maybeShift.(*[]*Shift)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftR{}
		}
		args = append(args, object.ScheduleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftR{}
			}

			for _, a := range args {
				if a == obj.ScheduleID {
					continue Outer
				}
			}

			args = append(args, obj.ScheduleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`schedules`),
		qm.WhereIn(`schedules.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Schedule")
	}

	var resultSlice []*Schedule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Schedule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for schedules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for schedules")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Schedule = foreign
		if foreign.R == nil {
			foreign.R = &scheduleR{}
		}
		foreign.R.Shifts = append(foreign.R.Shifts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ScheduleID == foreign.ID {
				local.R.Schedule = foreign
				if foreign.R == nil {
					foreign.R = &scheduleR{}
				}
				foreign.R.Shifts = append(foreign.R.Shifts, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShift interface{}, mods queries.Applicator) error {
	var slice []*Shift
	var object *Shift

	if singular {
		object = maybeShift.(*Shift)
	} else {
		slice = *maybeShift.(*[]*Shift)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Shifts = append(foreign.R.Shifts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Shifts = append(foreign.R.Shifts, local)
				break
			}
		}
	}

	return nil
}

// SetSchedule of the shift to the related item.
// Sets o.R.Schedule to related.
// Adds o to related.R.Shifts.
func (o *Shift) SetSchedule(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Schedule) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shifts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"schedule_id"}),
		strmangle.WhereClause("\"", "\"", 2, shiftPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.ScheduleID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ScheduleID = related.ID
	if o.R == nil {
		o.R = &shiftR{
			Schedule: related,
		}
	} else {
		o.R.Schedule = related
	}

	if related.R == nil {
		related.R = &scheduleR{
			Shifts: ShiftSlice{o},
		}
	} else {
		related.R.Shifts = append(related.R.Shifts, o)
	}

	return nil
}

// SetUser of the shift to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Shifts.
func (o *Shift) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shifts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, shiftPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.ScheduleID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &shiftR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Shifts: ShiftSlice{o},
		}
	} else {
		related.R.Shifts = append(related.R.Shifts, o)
	}

	return nil
}

// Shifts retrieves all the records using an executor.
func Shifts(mods ...qm.QueryMod) shiftQuery {
	mods = append(mods, qm.From("\"shifts\""))
	return shiftQuery{NewQuery(mods...)}
}

// FindShift retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShift(ctx context.Context, exec boil.ContextExecutor, userID int, scheduleID int, selectCols ...string) (*Shift, error) {
	shiftObj := &Shift{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shifts\" where \"user_id\"=$1 AND \"schedule_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, scheduleID)

	err := q.Bind(ctx, exec, shiftObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from shifts")
	}

	return shiftObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Shift) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no shifts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(shiftColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shiftInsertCacheMut.RLock()
	cache, cached := shiftInsertCache[key]
	shiftInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shiftAllColumns,
			shiftColumnsWithDefault,
			shiftColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shiftType, shiftMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shiftType, shiftMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shifts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shifts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into shifts")
	}

	if !cached {
		shiftInsertCacheMut.Lock()
		shiftInsertCache[key] = cache
		shiftInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Shift.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Shift) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	shiftUpdateCacheMut.RLock()
	cache, cached := shiftUpdateCache[key]
	shiftUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shiftAllColumns,
			shiftPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update shifts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shifts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shiftPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shiftType, shiftMapping, append(wl, shiftPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update shifts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for shifts")
	}

	if !cached {
		shiftUpdateCacheMut.Lock()
		shiftUpdateCache[key] = cache
		shiftUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q shiftQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for shifts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for shifts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShiftSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shifts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shiftPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in shift slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all shift")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Shift) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no shifts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(shiftColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shiftUpsertCacheMut.RLock()
	cache, cached := shiftUpsertCache[key]
	shiftUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shiftAllColumns,
			shiftColumnsWithDefault,
			shiftColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			shiftAllColumns,
			shiftPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert shifts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shiftPrimaryKeyColumns))
			copy(conflict, shiftPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shifts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shiftType, shiftMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shiftType, shiftMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert shifts")
	}

	if !cached {
		shiftUpsertCacheMut.Lock()
		shiftUpsertCache[key] = cache
		shiftUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Shift record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Shift) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Shift provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shiftPrimaryKeyMapping)
	sql := "DELETE FROM \"shifts\" WHERE \"user_id\"=$1 AND \"schedule_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from shifts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for shifts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shiftQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no shiftQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shifts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shifts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShiftSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shifts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shiftPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shift slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shifts")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Shift) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShift(ctx, exec, o.UserID, o.ScheduleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShiftSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShiftSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shifts\".* FROM \"shifts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shiftPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ShiftSlice")
	}

	*o = slice

	return nil
}

// ShiftExists checks if the Shift row exists.
func ShiftExists(ctx context.Context, exec boil.ContextExecutor, userID int, scheduleID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shifts\" where \"user_id\"=$1 AND \"schedule_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, scheduleID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, scheduleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if shifts exists")
	}

	return exists, nil
}
